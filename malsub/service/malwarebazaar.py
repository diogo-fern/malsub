import json
import pyzipper
import json
from io import BytesIO
from requests.exceptions import HTTPError

from malsub.service.base import APISpec, Service
from malsub.core.type import File, Hash
from malsub.core.web import request
from malsub.common import rw, frmt, out


class MalwareBazaar(Service):
    name = "MalwareBazaar"
    sname = "mb"
    api_keyl = 0

    desc = f"{name} is a public malware sample repository."
    subs = "public"
    url = "https://bazaar.abuse.ch"

    api_dowf = APISpec("POST", "https://mb-api.abuse.ch", "/api/v1")
    api_repf = APISpec("POST", "https://mb-api.abuse.ch", "/api/v1")
    api_subf = APISpec()

    api_repa = APISpec()
    api_repd = APISpec()
    api_repi = APISpec()

    api_repu = APISpec()
    api_subu = APISpec()

    api_srch = APISpec()
    api_quot = APISpec()

    ZIP_PASSWORD = b"infected"

    def download_file(self, hash: Hash):
        if hash.alg != "sha256":
            return f"wrong params. should be given sha256"
        self.api_dowf.data = {"query": "get_file", "sha256_hash": hash.hash}
        try:
            data, filename = request(self.api_dowf, bin=True)
        except HTTPError as e:
            if e.response.status_code == 404:
                return f'sample "{hash}" not found'
            raise HTTPError(e)
        if not filename:
            filename = hash.hash

        # If the response is json, so some error occured
        try:
            j = json.loads(data)
            return f'error {j["query_status"]}'
        except:
            pass

        try:
            with pyzipper.AESZipFile(BytesIO(data)) as zf:
                zf.setpassword(self.ZIP_PASSWORD)
                for sample_name in zf.namelist():
                    with zf.open(sample_name) as sample_fd:
                        data = sample_fd.read()
        except:
            return f'failed unzipping "{hash.hash}"'

        rw.writef(filename, data)
        return f'downloaded "{filename}"'

    def report_file(self, hash: Hash):
        if hash.alg not in ["sha256", "sha1", "md5"]:
            return f"wrong params. should be sha256/sha1/md5"
        self.api_repf.data = {"query": "get_info", "hash": hash.hash}
        data, _ = request(self.api_repf)
        data = frmt.jsontree(data)
        return out.pformat(data)

    @Service.unsupported
    def submit_file(self, file: File):
        pass

    @Service.unsupported
    def report_app(self, hash: Hash):
        pass

    @Service.unsupported
    def report_dom(self, dom: str):
        pass

    @Service.unsupported
    def report_ip(self, ip: str):
        pass

    @Service.unsupported
    def report_url(self, url: str):
        pass

    @Service.unsupported
    def submit_url(self, url: str):
        pass

    @Service.unsupported
    def search(self, srch: str):
        pass

    @Service.unsupported
    def quota(self):
        pass
